[[_first_time]]
=== Cài đặt Git lần đầu

Bây giờ bạn đã có Git trên hệ thống của mình, bạn sẽ muốn thực hiện một số điều để tùy chỉnh môi trường Git của mình.
Bạn chỉ nên thực hiện những việc này một lần trên bất kỳ máy tính nào; Chúng sẽ giữ lại cấu hình sau mỗi lần cập nhật.
Bạn cũng có thể thay đổi chúng bất kỳ lúc nào bằng cách chạy lại các lệnh.

Git đi kèm với một công cụ có tên là `git config` cho phép bạn lấy và đặt các biến cấu hình kiểm soát tất cả các khía cạnh của giao diện và hoạt động của Git.(((git commands, config)))
Các biến này có thể được lưu trữ ở ba nơi khác nhau:

1. Tập tin `[path]/etc/gitconfig`: Chứa các giá trị được áp dụng cho mọi người dùng trên hệ thống và tất cả các kho lưu trữ của họ.
  Nếu bạn thêm tùy chọn `--system` vào lệnh `git config`, nó sẽ đọc và ghi từ tập tin này một cách đặc biệt.
  Bởi vì đây là tập tin cấu hình hệ thống, bạn sẽ cần có đặc quyền của quản trị viên hoặc cấp trên để thực hiện các thay đổi đối với nó.
2. Tập tin `~/.gitconfig` hoặc `~/.config/git/config`: Giá trị cụ thể cho cá nhân bạn, người dùng của hệ thống.
  Bạn có thể làm cho Git đọc và ghi cụ thể vào tập tin này bằng cách thêm tùy chọn `--global` và điều này ảnh hưởng đến _tất cả_ của các kho lưu trữ bạn làm việc trên hệ thống của mình.
3. Tập tin `config` trong thư mục Git(Đó là), `.git/config`) của bất kỳ kho lưu trữ nào bạn hiện đang sử dụng: Dành riêng cho kho lưu trữ duy nhất đó.
  Bạn có thể buộc Git đọc và ghi vào tập tin này bằng tùy chọn `--local`, nhưng thực tế đó là mặc định.
  Không có gì đáng ngạc nhiên, bạn cần phải đặt ở đâu đó trong kho lưu trữ Git để tùy chọn này hoạt động bình thường.

Mỗi cấp độ sẽ ghi đè các giá trị ở cấp độ trước, vì vậy các giá trị trong `.git/config` sẽ ưu tiên hơn các giá trị trong `[path]/etc/gitconfig`.

Trên hệ thống Windows, Git tìm kiếm tập tin `.gitconfig` trong thư mục `$HOME`(`C:\Users\$USER` đối với hầu hết mọi người dùng).
Nó cũng vẫn tìm kiếm `[path]/etc/gitconfig`, mặc dù nó liên quan đến thư mục gốc MSys, đây là nơi bạn quyết định cài đặt Git trên hệ thống Windows của mình khi bạn chạy trình cài đặt.
Nếu bạn đang sử dụng phiên bản 2.x trở lên của Git cho Windows, thì cũng có một tập tin cấu hình cấp hệ thống tại `C:\Documents and Settings\All Users\Application Data\Git\config` trên Windows XP, và tại `C:\ProgramData\Git\config` trên Windows Vista và mới hơn.
Tập tin cấu hình này chỉ có thể được thay đổi bởi `git config -f <file>` với tư cách là quản trị viên.

Bạn có thể xem tất cả các cài đặt của mình và nguồn gốc của chúng bằng cách sử dụng:

[source,console]
----
$ git config --list --show-origin
----

==== Định danh của bạn

Điều đầu tiên bạn nên làm khi cài đặt Git là đặt tên người dùng và địa chỉ email của mình.
Điều này rất quan trọng vì mọi commit Git đều sử dụng thông tin này và nó luôn được đưa vào các commit mà bạn bắt đầu tạo:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Một lần nữa, bạn chỉ cần làm điều này một lần nếu bạn thêm vào tùy chọn `--global`, bởi vì sau đó Git sẽ luôn sử dụng thông tin đó cho bất kỳ điều gì bạn làm trên hệ thống đó.
Nếu bạn muốn ghi đè điều này bằng một tên hoặc địa chỉ email khác cho các dự án cụ thể, bạn có thể chạy lệnh mà không có tùy chọn `--global` khi bạn đang ở trong dự án đó.

Nhiều công cụ GUI sẽ giúp bạn thực hiện việc này khi bạn chạy chúng lần đầu.

[[_editor]]
==== Phần mềm soạn thảo của bạn

Bây giờ danh tính của bạn đã được thiết lập, bạn có thể định cấu hình trình soạn thảo văn bản mặc định sẽ được sử dụng khi Git cần bạn nhập tin nhắn.
Nếu không được định cấu hình, Git sử dụng trình chỉnh sửa mặc định của hệ thống của bạn.

Nếu bạn muốn sử dụng một trình soạn thảo văn bản khác, chẳng hạn như Emacs, bạn có thể làm như sau:

[source,console]
----
$ git config --global core.editor emacs
----

Trên hệ thống Windows, nếu bạn muốn sử dụng một trình soạn thảo văn bản khác, bạn phải chỉ định đường dẫn đầy đủ đến tập tin thực thi của nó.
Điều này có thể khác nhau tùy thuộc vào cách đóng gói trình soạn thảo của bạn.

Trong trường hợp của Notepad ++, một trình soạn thảo lập trình phổ biến, bạn có thể muốn sử dụng phiên bản 32 bit, vì tại thời điểm viết phiên bản 64 bit không hỗ trợ tất cả các thành phần bổ sung(Plug-in).
Nếu bạn đang sử dụng hệ thống Windows 32 bit hoặc bạn có phần mềm soạn thảo 64 bit trên hệ thống 64 bit, bạn sẽ cấu hình một cái gì đó như thế này:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs và Notepad ++ là các phần mềm soạn thảo văn bản phổ biến thường được các nhà phát triển sử dụng trên các hệ thống dựa trên Unix như Linux và macOS hoặc hệ thống Windows.
Nếu bạn đang sử dụng trình chỉnh sửa khác hoặc phiên bản 32 bit, vui lòng tìm hướng dẫn cụ thể về cách thiết lập trình chỉnh sửa yêu thích của bạn với Git tại <<C-git-commands#ch_core_editor>>.
====

[WARNING]
====
Bạn có thể thấy, nếu bạn không thiết lập trình chỉnh sửa của mình như thế này, bạn sẽ rơi vào trạng thái thực sự khó hiểu khi Git cố gắng khởi chạy nó.
Ví dụ trên hệ thống Windows có thể bao gồm hoạt động Git bị dừng hoạt động trong quá trình chỉnh sửa do Git khởi tạo.
====

==== Nhánh mặc định của bạn

Theo mặc định, Git sẽ tạo một nhánh có tên _master_ khi bạn tạo một kho mới với `git init`.
Từ phiên bản Git 2.28 trở đi, bạn có thể đặt một tên khác cho nhánh ban đầu.

Để đặt _main_ làm tên nhánh mặc định, hãy thực thi lệnh cấu hình sau:

[source,console]
----
$ git config --global init.defaultBranch main
----

==== Kiểm tra các cài đặt của bạn

Nếu bạn muốn kiểm tra cài đặt cấu hình của mình, bạn có thể sử dụng lệnh `git config --list` để liệt kê tất cả các cài đặt mà Git có thể tìm thấy tại thời điểm đó:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Bạn có thể thấy các từ khóa nhiều lần, vì Git đọc cùng một từ khóa từ các tập tin khác nhau(ví dụ: `[path]/etc/gitconfig` và `~/.gitconfig`).
Trong trường hợp này, Git sử dụng giá trị cuối cùng cho mỗi từ khóa duy nhất mà nó nhìn thấy.

Bạn cũng có thể kiểm tra một giá trị từ khoá cụ thể của Git bằng cách gõ `git config <key>`:(((git command, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Vì Git có thể đọc cùng một giá trị biến cấu hình từ nhiều tập tin, nên có thể bạn có giá trị không mong muốn cho một trong những giá trị này và bạn không biết tại sao.
Trong những trường hợp như vậy, bạn có thể tra cứu Git về _origin_ cho giá trị đó và nó sẽ cho bạn biết tập tin cấu hình nào có quyết định cuối cùng trong việc đặt giá trị đó:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
