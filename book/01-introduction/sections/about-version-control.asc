=== Về kiểm soát phiên bản

(((version control)))
"`Kiểm soát phiên bản`" là gì và tại sao bạn nên quan tâm?
Kiểm soát phiên bản là một hệ thống ghi lại các thay đổi đối với tập tin hoặc tập hợp các tập tin theo thời gian để bạn có thể quay lại các phiên bản cụ thể sau này.
Đối với các ví dụ trong cuốn sách này, bạn sẽ sử dụng mã nguồn phần mềm làm tập tin đang được kiểm soát phiên bản, mặc dù trên thực tế, bạn có thể làm điều này với hầu hết mọi loại tệp trên máy tính.

Nếu bạn là một nhà thiết kế đồ họa hoặc web và muốn giữ mọi phiên bản của hình ảnh hoặc bố cục(mà bạn chắc chắn muốn có nhất), thì Hệ thống kiểm soát phiên bản(Version Control System-VCS) là thứ bạn rất cần.
Nó cho phép bạn hoàn tác các tạp tin đã chọn về trạng thái trước đó, hoàn tác toàn bộ dự án về trạng thái trước đó, so sánh các thay đổi theo thời gian, xem ai đã sửa đổi lần cuối cùng, điều gì đó có thể gây ra sự cố, ai đã đưa ra sự cố và khi nào, v.v.
Sử dụng VCS nói chung cũng có nghĩa là nếu bạn làm hỏng mọi thứ hoặc làm mất tệp, bạn có thể dễ dàng khôi phục.
Ngoài ra, bạn có được tất cả những điều này với chi phí rất ít.

==== Hệ thống kiểm soát phiên bản cục bộ

(((version control,local)))
Phương pháp kiểm soát phiên bản được nhiều người lựa chọn là sao chép tập tin vào một thư mục khác (có thể là một thư mục được đánh dấu thời gian, nếu chúng thông minh).
Cách tiếp cận này rất phổ biến vì nó rất đơn giản, nhưng nó cũng cực kỳ dễ xảy ra lỗi.
Rất dễ quên bạn đang ở thư mục nào và vô tình ghi nhầm vào tệp hoặc sao chép qua các tệp mà bạn không cố ý.

Để giải quyết vấn đề này, từ lâu, các lập trình viên đã phát triển các VCS cục bộ có một cơ sở dữ liệu đơn giản giữ tất cả các thay đổi đối với tập tin dưới sự kiểm soát các lần sửa đổi.

.Kiểm soát phiên bản cục bộ
image::images/local.png[Mô hình kiểm soát phiên bản cục bộ]

Một trong những công cụ VCS phổ biến nhất là hệ thống có tên RCS, hệ thống này vẫn còn được phân phối trên nhiều máy tính ngày nay.
https://www.gnu.org/software/rcs/[RCS] hoạt động bằng cách giữ các bộ bản vá(nghĩa là sự khác biệt giữa các tập tin) ở một định dạng đặc biệt trên ổ cứng; sau đó nó có thể tái tạo lại bất kỳ tệp nào tại bất kỳ thời điểm nào bằng cách thêm tất cả các bản vá.

==== Hệ thống kiểm soát phiên bản tập trung

(((version control,centralized)))
Vấn đề lớn tiếp theo mà mọi người gặp phải là họ cần cộng tác với các nhà phát triển trên các hệ thống khác.
Để giải quyết vấn đề này, Hệ thống kiểm soát phiên bản tập trung(Centralized Version Control Systems- CVCS) đã được phát triển.
Các hệ thống này(chẳng hạn như CVS, Subversion và Perforce) có một máy chủ duy nhất chứa tất cả các tập tin được tạo phiên bản và một số ứng dụng khách kiểm tra tập tin từ vị trí trung tâm đó. (((CVS)))(((Subversion)))(((Perforce)))
Trong nhiều năm, đây là tiêu chuẩn để kiểm soát phiên bản.

.Kiểm soát phiên bản tập trung
image::images/centralized.png[Mô hình kiểm soát phiên bản tập trung]

Thiết lập này mang lại nhiều lợi thế, đặc biệt là so với các VCS cục bộ.
Ví dụ, mọi người đều biết ở một mức độ nhất định những gì mọi người khác trong dự án đang làm.
Quản trị viên có quyền kiểm soát chi tiết việc ai có thể làm những gì, và việc quản lý CVCS dễ dàng hơn nhiều so với việc xử lý cơ sở dữ liệu cục bộ trên mọi máy khách.

Tuy nhiên, thiết lập này cũng có một số nhược điểm nghiêm trọng.
Rõ ràng nhất là các phiên bản được quản lý duy nhất ở một máy chủ.
Nếu máy chủ đó gặp sự cố trong một giờ, thì trong giờ đó, không ai có thể tham gia hoặc lưu các thay đổi đã tạo phiên bản cho bất kỳ thứ gì họ đang làm.
Nếu đĩa cứng mà cơ sở dữ liệu trung tâm đang sử dụng bị hỏng và các bản sao lưu thích hợp không được lưu giữ, bạn sẽ mất hoàn toàn mọi thứ -- toàn bộ lịch sử của dự án ngoại trừ bất kỳ bản lưu nào mà mọi người tình cờ vẫn giữ trên máy cục bộ của họ.
Các VCS cục bộ cũng gặp phải vấn đề này -- bất cứ khi nào bạn có toàn bộ lịch sử của dự án ở một nơi duy nhất, bạn có nguy cơ mất tất cả.

==== Kiểm soát phiên bản phân tán

(((version control,distributed)))
Đây là lúc Hệ thống Kiểm soát Phiên bản Phân tán(Distributed Version Control Systems - DVCS) ra đời.
Trong một DVCS(chẳng hạn như Git, Mercurial, Bazaar hoặc Darcs), khách hàng không chỉ kiểm tra phiên bản mới nhất của các tập tin; Thay vào đó, chúng phản ánh đầy đủ kho lưu trữ, bao gồm toàn bộ lịch sử của nó.
Do đó, nếu bất kỳ máy chủ nào bị chết, kho mã nguồn vẫn được giữ ở các máy chủ còn lại và đều là phiên bản mới nhất với đầy đủ dữ liệu về lịch sử phiên bản. Các máy khách có thể lấy từ các máy chủ đó và đồng bộ với phiên bản ở cục bộ.
Mỗi bản sao thực sự là một bản sao lưu đầy đủ của tất cả dữ liệu.

.Kiểm soát phiên bản phân tán
image::images/distributed.png[Mô hình kiểm soát phiên bản phân tán]

Hơn nữa, nhiều hệ thống trong số này giải quyết khá tốt việc có một số kho lưu trữ từ xa mà chúng có thể làm việc cùng, vì vậy bạn có thể hợp tác với các nhóm người khác nhau theo những cách khác nhau đồng thời trong cùng một dự án.
Điều này cho phép bạn thiết lập một số loại quy trình công việc không thể thực hiện được trong các hệ thống tập trung, chẳng hạn như mô hình phân cấp.
