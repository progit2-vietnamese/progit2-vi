[[what_is_git_section]]
=== Git là gì?

Vậy tóm lại, Git là gì?
Đây là một phần quan trọng cần hiểu vì nếu bạn hiểu Git là gì, và các nguyên tắc cơ bản về cách hoạt động của nó, thì việc sử dụng Git một cách hiệu quả có lẽ sẽ dễ dàng hơn nhiều cho bạn.
Khi bạn học Git, hãy cố gắng giải thích những điều bạn có thể biết về các VCS khác, chẳng hạn như CVS, Subversion hoặc Perforce -- làm như vậy sẽ giúp bạn tránh được những nhầm lẫn nhỏ khi sử dụng công cụ.
Mặc dù giao diện người dùng của Git khá giống với những VCS khác này, Git lưu trữ và quản lý về thông tin theo một cách rất khác và hiểu được những điểm khác biệt này sẽ giúp bạn tránh bị nhầm lẫn khi sử dụng nó.(((Subversion)))(((Perforce)))

==== Snapshots, không khác biệt lắm

Sự khác biệt chính giữa Git và bất kỳ VCS nào khác(bao gồm Subversion và các thứ tương tự) là cách Git nghĩ gì về dữ liệu của nó.
Về mặt khái niệm, hầu hết các hệ thống khác lưu trữ thông tin dưới dạng danh sách các thay đổi dựa trên tập tin.
Các hệ thống khác này(CVS, Subversion, Perforce, Bazaar, v.v.) coi thông tin chúng lưu trữ dưới dạng một tập hợp các tập tin và những thay đổi được thực hiện đối với từng tập tin theo thời gian(điều này thường được mô tả là _delta-based_ version control).

.Lưu trữ dữ liệu dưới dạng các thay đổi đối với phiên bản cơ sở của mỗi tập tin
image::images/deltas.png[Lưu trữ dữ liệu dưới dạng các thay đổi đối với phiên bản cơ sở của mỗi tập tin]

Git không nghĩ đến hoặc lưu trữ dữ liệu của nó theo cách này.
Thay vào đó, Git nghĩ về dữ liệu của nó giống như một loạt snapshot của một hệ thống tập tin thu nhỏ.
Với Git, mỗi khi bạn commit hoặc lưu trạng thái dự án của mình, về cơ bản, Git sẽ lưu trạng thái tất cả các tệp của bạn trông như thế nào tại thời điểm đó và lưu trữ tham chiếu đến trạng thái đó.
Để hiệu quả, nếu các tập tin không thay đổi, Git sẽ không lưu trữ tập tin đó lại, chỉ là một liên kết đến tập tin giống hệt trước đó mà nó đã lưu trữ.
Git coi dữ liệu của nó giống như một *luồng của các trạng thái - snapshot*.

.Lưu trữ dữ liệu dưới dạng snapshot của dự án theo thời gian
image::images/snapshots.png[Lưu trữ dữ liệu dưới dạng snapshot của dự án theo thời gian]

Đây là điểm khác biệt quan trọng giữa Git và gần như tất cả các VCS khác.
Nó làm cho Git xem xét lại hầu hết mọi khía cạnh của kiểm soát phiên bản mà hầu hết các hệ thống khác đã sao chép từ thế hệ trước.
Điều này làm cho Git giống như một hệ thống tập tin nhỏ với một số công cụ cực kỳ mạnh mẽ được tích hợp bên trên nó, thay vì chỉ đơn giản là một VCS.
Chúng tôi sẽ khám phá một số lợi ích bạn nhận được bằng cách suy nghĩ về dữ liệu của bạn theo cách này khi chúng tôi đề cập đến việc phân nhánh Git trong <<ch03-git-branching#ch03-git-branching>>.

==== Gần như mọi hoạt động đều là cục bộ

Hầu hết các hoạt động trong Git chỉ cần các tập tin cục bộ và tài nguyên để hoạt động -- nói chung không cần thông tin từ một máy tính khác trong mạng của bạn.
Nếu bạn đã quen với một CVCS, nơi hầu hết các hoạt động đều có độ trễ mạng, khía cạnh này của Git sẽ khiến bạn nghĩ rằng các vị thần tốc độ đã ban phước cho Git với sức mạnh phi phàm.
Bởi vì bạn có toàn bộ lịch sử của dự án ngay trên ổ cứng cục bộ của mình, hầu hết các hoạt động gần như tức thời.

Ví dụ: để duyệt lịch sử của dự án, Git không cần phải ra ngoài máy chủ để lấy lịch sử và hiển thị cho bạn -- nó chỉ cần đọc trực tiếp từ cơ sở dữ liệu cục bộ của bạn.
Điều này có nghĩa là bạn thấy lịch sử dự án gần như ngay lập tức.
Nếu bạn muốn xem những thay đổi được giới thiệu giữa phiên bản hiện tại của tệp và tệp một tháng trước, Git có thể tra cứu tệp một tháng trước và thực hiện tính toán chênh lệch cục bộ, thay vì phải yêu cầu máy chủ từ xa thực hiện. hoặc kéo phiên bản cũ hơn của tệp từ máy chủ từ xa để thực hiện việc đó cục bộ.

Điều này cũng có nghĩa là có rất ít điều bạn không thể làm nếu đang ngoại tuyến hoặc tắt VPN.
Nếu bạn lên máy bay hoặc tàu hỏa và muốn thực hiện một công việc nhỏ, bạn có thể commit một cách vui vẻ(với bản sao _local_ của bạn, nhớ không?) Cho đến khi bạn có kết nối mạng để tải lên.
Nếu bạn về nhà và không thể làm cho ứng dụng khách VPN của mình hoạt động bình thường, bạn vẫn có thể làm việc.
Trong nhiều hệ thống VCS khác, điề đó là không thể hoặc khó khăn.
Trong Perforce, chẳng hạn, bạn không thể làm gì nhiều khi không kết nối với máy chủ; trong Subversion và CVS, bạn có thể chỉnh sửa tập tin, nhưng bạn không thể thực hiện các thay đổi đối với cơ sở dữ liệu của mình(vì cơ sở dữ liệu của bạn đang ngoại tuyến).
Điều này có vẻ không phải là một vấn đề lớn, nhưng bạn có thể ngạc nhiên về sự khác biệt lớn mà nó có thể tạo ra.

==== Git có tính toàn vẹn

Mọi thứ trong Git đều được tổng kiểm tra trước khi nó được lưu trữ và sau đó được tham chiếu bởi tổng kiểm tra đó.
Điều này có nghĩa là không thể thay đổi nội dung của bất kỳ tập tin hoặc thư mục nào mà Git không biết về nó.
Chức năng này được tích hợp vào Git ở các cấp thấp nhất và không thể thiếu trong triết lý của nó.
Bạn không thể mất thông tin khi chuyển tiếp hoặc bị hỏng tập tin mà Git không thể phát hiện ra nó.

Cơ chế mà Git sử dụng để tổng kiểm tra này được gọi là hàm băm SHA-1.(((SHA-1)))
Đây là một chuỗi 40 ký tự bao gồm các ký tự thập lục phân(0–9 và a–f) và được tính toán dựa trên nội dung của cấu trúc tệp hoặc thư mục trong Git.
Hàm băm SHA-1 trông giống như sau:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Bạn sẽ thấy các giá trị băm này ở khắp nơi trong Git vì nó sử dụng chúng rất nhiều.
Trên thực tế, Git lưu trữ mọi thứ trong cơ sở dữ liệu của nó không phải bằng tên tập tin mà bằng giá trị băm của nội dung của nó.

==== Git thường chỉ thêm dữ liệu

Khi bạn thực hiện các hành động trong Git, gần như tất cả chúng chỉ chứa dữ liệu _thêm_ vào cơ sở dữ liệu Git.
Thật khó để yêu cầu hệ thống thực hiện bất kỳ điều gì không thể hoàn tác hoặc xóa dữ liệu theo bất kỳ cách nào.
Như với bất kỳ VCS nào, bạn có thể làm mất hoặc xáo trộn các thay đổi mà bạn chưa commit, nhưng sau khi bạn thực hiện snapshot vào Git, rất khó để mất, đặc biệt nếu bạn thường xuyên đẩy cơ sở dữ liệu của mình sang một kho lưu trữ khác.

Điều này làm cho việc sử dụng Git trở nên thú vị vì chúng tôi biết rằng chúng tôi có thể thử nghiệm mà không có nguy cơ làm hỏng mọi thứ.
Để có cái nhìn sâu hơn về cách Git lưu trữ dữ liệu của nó và cách bạn có thể khôi phục dữ liệu bị mất, xem tại <<ch02-git-basics-chapter#_undoing>>.

==== Ba trạng thái

Hãy chú ý ngay bây giờ -- đây là điều chính cần nhớ về Git nếu bạn muốn phần còn lại của quá trình học tập của mình diễn ra suôn sẻ.
Git có ba trạng thái chính cho mỗi tập tin mà nó theo dõi: _modified_, _staged_, và _committed_:

* Modified có nghĩa là bạn đã thay đổi tập tin nhưng chưa commit nó với cơ sở dữ liệu của bạn.
* Staged có nghĩa là bạn đã đánh dấu một tập tin đã sửa đổi trong phiên bản hiện tại của nó, các sửa đổi mới của tập tin đã được ghi nhận và đang trong hàng đợi để chuyển sang trạng thái commited.
* Commited có nghĩa là sự thay đổi của chúng đã được lưu lại an toàn trong cơ sở dữ liệu.

Điều này dẫn chúng ta đến ba phần chính của một dự án Git: cây làm việc(The working tree), khu vực đệm(staging area) và thư mục Git(Git directory).

.Working tree, staging area, và Git directory
image::images/areas.png["Working tree, staging area, and Git directory."]

Cây làm việc(The working tree) là tập hợp các tập tin trong thư mục của dự án. Git sẽ quản lý, theo dõi sự thay đổi của các tập tin đó.
Các tệp này được lấy ra từ cơ sở dữ liệu nén trong thư mục Git và được đặt trên ổ cứng để bạn sử dụng hoặc sửa đổi.

Staging area là một tập tin, thường được chứa trong thư mục Git của bạn, lưu trữ thông tin về những gì sẽ được commit tiếp theo của bạn.
Tên kỹ thuật của nó trong cách nói của Git là "`chỉ mục(index)`", nhưng cụm từ "khu vực đệm`" cũng mô tả tốt.

Thư mục Git là nơi Git lưu trữ siêu dữ liệu và cơ sở dữ liệu đối tượng cho dự án của bạn.
Đây là phần quan trọng nhất của Git và nó là phần được sao chép khi bạn _clone_ kho lưu trữ từ một máy tính khác.

Quy trình công việc Git cơ bản diễn ra như sau:

1. Bạn sửa các tập tin trong working tree.
2. Bạn chỉ chọn các tập tin thay đổi mà bạn muốn trở thành một phần của commit tiếp theo, điều này sẽ _chỉ_ thêm những tập tin được sửa đổi đó vào khu vực đệm(staging area).
3. Bạn thực hiện một commit, lấy các tập tin ở trong khu vực đệm và lưu trữ trạng thái sửa đổi vĩnh viễn vào thư mục Git của bạn.

Nếu một phiên bản cụ thể của tệp nằm trong thư mục Git, thì nó được coi là _comiled_.
Nếu nó đã được sửa đổi và được thêm vào khu vực tổ chức, nó là _staged_.
Và nếu nó đã được thay đổi kể từ khi nó được kiểm tra nhưng chưa được đưa vào khu vực đệm, nó là _modified_.
Trong <<ch02-git-basics-chapter#ch02-git-basics-chapter>>, bạn sẽ tìm hiểu thêm về những trạng thái này và cách bạn có thể tận dụng chúng hoặc bỏ qua hoàn toàn phần khu vực đệm.
